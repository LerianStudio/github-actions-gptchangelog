name: Generate Changelog
description: Generate changelog zusing gptchangelog

inputs:
  OPENAI_API_KEY:
    required: true
  GH_TOKEN:
    required: true
  LERIAN_CI_CD_USER_GPG_KEY:
    required: true
  LERIAN_CI_CD_USER_GPG_KEY_PASSWORD:
    required: true
  LERIAN_CI_CD_USER_NAME:
    required: true
  LERIAN_CI_CD_USER_EMAIL:
    required: true
  LERIAN_STUDIO_MIDAZ_PUSH_BOT_APP_ID:
    required: true
  LERIAN_STUDIO_MIDAZ_PUSH_BOT_PRIVATE_KEY:
    required: true
  WORK_DIR:
    required: false
    default: '.'

permission:
  contents: write
  id-token: write
  packages: write

runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - run: |
        python -m pip install --upgrade pip
        pip install gptchangelog
      shell: bash

    - run: |
        mkdir -p .gptchangelog
        echo "[gptchangelog]" > .gptchangelog/config.ini
        echo "openai = true" >> .gptchangelog/config.ini
        echo "[openai]" >> .gptchangelog/config.ini
        echo "api_key = ${OPENAI_API_KEY}" >> .gptchangelog/config.ini
        echo "model = gpt-4o" >> .gptchangelog/config.ini
        echo "max_context_tokens = 80000" >> .gptchangelog/config.ini
      shell: bash
      env:
        OPENAI_API_KEY: ${{ inputs.OPENAI_API_KEY }}

    - run: |
        mkdir -p .gptchangelog/templates
        cat > .gptchangelog/templates/changelog_prompt.txt << 'EOF'
        # $project_name Changelog

        ## Release $next_version (Released on $current_date)

        ### What's New
        $commit_messages

        ### ‚ú® Features
        - Highlight new features added in this release.

        ### üõ† Fixes
        - List bug fixes and improvements.

        ### üìö Documentation
        - Summarize updates to documentation.

        ### üöÄ Improvements
        - Highlight performance or backend optimizations.

        ### ‚ö†Ô∏è Breaking Changes
        - List any breaking changes here.

        ### üôå Contributors
        - Acknowledge contributors for this release.
        EOF
      shell: bash

    - name: Set changelog target path
      id: changelog_path_setter
      shell: bash
      env:
        WORK_DIR_INPUT: ${{ inputs.WORK_DIR }}
      run: |
        CHANGELOG_FILE_NAME="CHANGELOG.md"
        FINAL_PATH=""
        if [ -n "$WORK_DIR_INPUT" ] && [ "$WORK_DIR_INPUT" != "." ]; then
          # WORK_DIR is specified and is not just '.'
          FINAL_PATH="${WORK_DIR_INPUT}/${CHANGELOG_FILE_NAME}"
          echo "INFO: WORK_DIR ('$WORK_DIR_INPUT') is set. CHANGELOG.md path: $FINAL_PATH"
        else
          # WORK_DIR is empty or '.', use current directory
          FINAL_PATH="./${CHANGELOG_FILE_NAME}"
          echo "INFO: WORK_DIR is empty or '.'. CHANGELOG.md path: $FINAL_PATH"
        fi
        echo "path=$FINAL_PATH" >> "$GITHUB_OUTPUT"

    - run: |
        echo "OPENAI_API_KEY=${OPENAI_API_KEY}" > .env
        git fetch --tags

        if git describe --tags --abbrev=0 --match "*" HEAD >/dev/null 2>&1; then
          LAST_TAG=$(git describe --tags --abbrev=0 --match "*" HEAD)

          if git describe --tags --abbrev=0 --match "*" HEAD^ >/dev/null 2>&1; then
            PENULT_TAG=$(git describe --tags --abbrev=0 --match "*" HEAD^)
            echo "üü¢ Generating changelog from $PENULT_TAG to $LAST_TAG"
            gptchangelog generate --since "$PENULT_TAG" --to "$LAST_TAG" --output $CHANGELOG_TARGET_PATH
          else
            FIRST_COMMIT=$(git rev-list --max-parents=0 HEAD)
            echo "üü° First tag detected. Generating changelog from $FIRST_COMMIT to $LAST_TAG"
            gptchangelog generate --since "$FIRST_COMMIT" --to "$LAST_TAG" --output $CHANGELOG_TARGET_PATH
          fi

          # Export LAST_TAG to GITHUB_ENV
          echo "LAST_TAG=$LAST_TAG" >> $GITHUB_ENV
        else
          FIRST_COMMIT=$(git rev-list --max-parents=0 HEAD)
          echo "üî¥ No tag detected. Generating changelog from $FIRST_COMMIT to HEAD"
          gptchangelog generate --since "$FIRST_COMMIT" --to HEAD --output $CHANGELOG_TARGET_PATH
          
          # Fallback LAST_TAG
          echo "LAST_TAG=HEAD" >> $GITHUB_ENV
        fi      
        echo "üßπ Cleaning markdown extra blocks"
        sed -i '/^```/d' $CHANGELOG_TARGET_PATH
      shell: bash
      env:
        OPENAI_API_KEY: ${{ inputs.OPENAI_API_KEY }}
        CHANGELOG_TARGET_PATH: ${{ steps.changelog_path_setter.outputs.path }}

    - name: Replace version header
      run: |
        echo "üìå Replacing version header generated by gptchangelog"

        # Encontra a linha que cont√©m o primeiro cabe√ßalho de vers√£o `## [vX.Y.Z] - ...`
        HEADER_LINE=$(grep -nE "^## \[v[0-9]+\.[0-9]+\.[0-9]+\] - " $CHANGELOG_TARGET_PATH | head -n 1 | cut -d: -f1)
        echo "üìç Header found on line: $HEADER_LINE"

        # Substitui exatamente essa linha com a nova vers√£o baseada no LAST_TAG
        sed -i "${HEADER_LINE}s|^.*|## [${LAST_TAG}] - $(date +%Y-%m-%d)|" $CHANGELOG_TARGET_PATH

        echo "‚úÖ Header updated:"
        sed -n "${HEADER_LINE}p" $CHANGELOG_TARGET_PATH
      shell: bash
      env:
        LAST_TAG: ${{ env.LAST_TAG }}
        CHANGELOG_TARGET_PATH: ${{ steps.changelog_path_setter.outputs.path }}

    - name: Replace version header
      run: |
        echo "üìå Replacing version header"
        sed -i "5s|^## \[v[0-9]\+\.[0-9]\+\.[0-9]\+\(-[a-zA-Z0-9.]\+\)\?\] - .*|## [v${LAST_TAG//v/}] - $(date +%Y-%m-%d)|" $CHANGELOG_TARGET_PATH
        cat $CHANGELOG_TARGET_PATH
      shell: bash
      env:
        LAST_TAG: ${{ env.LAST_TAG }}
        CHANGELOG_TARGET_PATH: ${{ steps.changelog_path_setter.outputs.path }}

    - uses: crazy-max/ghaction-import-gpg@v6
      with:
        gpg_private_key: ${{ inputs.LERIAN_CI_CD_USER_GPG_KEY }}
        passphrase: ${{ inputs.LERIAN_CI_CD_USER_GPG_KEY_PASSWORD }}
        git_committer_name: ${{ inputs.LERIAN_CI_CD_USER_NAME }}
        git_committer_email: ${{ inputs.LERIAN_CI_CD_USER_EMAIL }}
        git_config_global: true
        git_user_signingkey: true
        git_commit_gpgsign: true

    - uses: actions/create-github-app-token@v1
      id: app-token
      with:
        app-id: ${{ inputs.LERIAN_STUDIO_MIDAZ_PUSH_BOT_APP_ID }}
        private-key: ${{ inputs.LERIAN_STUDIO_MIDAZ_PUSH_BOT_PRIVATE_KEY }}

    - run: |
        BASE_BRANCH="${GITHUB_REF##*/}"
        BRANCH_NAME="release/update-changelog-${{ env.LAST_TAG }}"
        
        git checkout -b $BRANCH_NAME

        git add $CHANGELOG_TARGET_PATH
        git diff --cached --quiet || git commit -S -m "chore(release): Update CHANGELOG"

        # Faz o merge da BASE_BRANCH na sua branch, sempre priorizando sua vers√£o do changelog
        git fetch origin "$BASE_BRANCH"
        git merge -X ours origin/"$BASE_BRANCH" --no-ff -m "Merge $BASE_BRANCH into ${BRANCH_NAME}" || {
          # Se houver conflito no merge (ex: ort n√£o resolve tudo), for√ßa a resolu√ß√£o
          git checkout --ours $CHANGELOG_TARGET_PATH
          git add $CHANGELOG_TARGET_PATH
          git commit -m "resolve conflict using ours strategy"
        }

        # Faz o push da branch atualizada
        git push --force-with-lease origin $BRANCH_NAME

        # Verifica se o PR j√° existe
        if ! gh pr view $BRANCH_NAME --base "$BASE_BRANCH" > /dev/null 2>&1; then
          gh pr create \
            --title "chore(release): Update CHANGELOG" \
            --body "Atualiza√ß√£o autom√°tica do changelog para ${{ env.LAST_TAG }}" \
            --base "$BASE_BRANCH" \
            --head $BRANCH_NAME
        fi

        gh pr merge --merge --delete-branch || true
      env:
        GH_TOKEN: ${{ steps.app-token.outputs.token }}
        CHANGELOG_TARGET_PATH: ${{ steps.changelog_path_setter.outputs.path }}
      shell: bash